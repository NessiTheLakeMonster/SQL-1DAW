-- Examen Ines Maria Barrera

DROP TABLE ALUMNOS;
DROP TABLE PROFESORES;
DROP TABLE ASIGNATURAS;
DROP TABLE NOTAS;
CREATE TABLE ALUMNOS
(
  COD_ALUMNO NUMBER(3) PRIMARY KEY,
  NOMBRE VARCHAR2(30),
  APE1 VARCHAR2(30),
  APE2 VARCHAR2(30),
  TELEFONO NUMBER(10),
  CIUDAD VARCHAR2(30)
);

INSERT INTO ALUMNOS VALUES(1,'ANTONIO', 'RODRIGUEZ', 'OLMO',111111, 'PUERTOLLANO');
INSERT INTO ALUMNOS VALUES(2,'ANA', 'SANTOS', 'SANTOS',222222, 'PUERTOLLANO');
INSERT INTO ALUMNOS VALUES(3,'SANTIAGO', 'REDONDO', 'MORENO',333333, 'PUERTOLLANO');
INSERT INTO ALUMNOS VALUES(4,'ANGELA', 'VELASCO', 'VELASCO',444444, 'CIUDAD REAL');
INSERT INTO ALUMNOS VALUES(5,'PEPE', 'SANTOS', 'ROMERO',555555, 'CIIUDAD REAL');

CREATE TABLE PROFESORES
(
    CODIGO VARCHAR2(4) PRIMARY KEY,
    DNI VARCHAR2(11) UNIQUE,
    NOMBRE VARCHAR2(30)
);

INSERT INTO PROFESORES VALUES('P001', '59595959', 'ANTONIO');
INSERT INTO PROFESORES VALUES('P002', '56565656', 'CARMEN');
INSERT INTO PROFESORES VALUES('P003', '72727272', 'TERESA');

CREATE TABLE  ASIGNATURAS
(
  COD_ASIG NUMBER(3) PRIMARY KEY,
  NOMBRE  VARCHAR2(20),
  HORAS NUMBER(2),
  COD_PROFE VARCHAR2(4),
  FOREIGN KEY (COD_PROFE) REFERENCES PROFESORES(CODIGO)
);

INSERT INTO ASIGNATURAS VALUES(1,'PROGRAMACION',6, 'P001');
INSERT INTO ASIGNATURAS VALUES(2,'BASE DE DATOS',4, 'P001');
INSERT INTO ASIGNATURAS VALUES(3,'LENGUAJE DE MARCAS',6, 'P002');
INSERT INTO ASIGNATURAS VALUES(4,'INGLES',5, 'P003');

CREATE TABLE NOTAS
(
  COD_ALUMNO NUMBER(3),
  COD_ASIG NUMBER(3),
  NOTA NUMBER(4,2),
  PRIMARY KEY (COD_ALUMNO, COD_ASIG),
  FOREIGN KEY (COD_ALUMNO) REFERENCES ALUMNOS(COD_ALUMNO) ON DELETE CASCADE,
  FOREIGN KEY (COD_ASIG) REFERENCES ASIGNATURAS(COD_ASIG) ON DELETE CASCADE	
);



INSERT INTO NOTAS VALUES(1,1,6);
INSERT INTO NOTAS VALUES(1,2,4);
INSERT INTO NOTAS VALUES(1,3,2);
INSERT INTO NOTAS VALUES(1,4,9);

INSERT INTO NOTAS VALUES(2,1,5);
INSERT INTO NOTAS VALUES(2,2,7);
INSERT INTO NOTAS VALUES(2,3,8);
INSERT INTO NOTAS VALUES(2,4,8);

INSERT INTO NOTAS VALUES(3,1,8);
INSERT INTO NOTAS VALUES(3,2,1);
INSERT INTO NOTAS VALUES(3,3,5);
INSERT INTO NOTAS VALUES(3,4,10);

INSERT INTO NOTAS VALUES(4,3,2);
INSERT INTO NOTAS VALUES(4,4,3);

INSERT INTO NOTAS VALUES(5,1,2);
INSERT INTO NOTAS VALUES(5,2,1);
INSERT INTO NOTAS VALUES(5,3,1);
INSERT INTO NOTAS VALUES(5,4,1);

------------------------------------------------------------------------------
-- EJERCICIO 1
SELECT ASIGNATURAS.NOMBRE, AVG(NOTAS.NOTA)
FROM ASIGNATURAS JOIN NOTAS
ON ASIGNATURAS.COD_ASIG = NOTAS.COD_ASIG
JOIN ALUMNOS
ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO
    WHERE UPPER(ALUMNOS.NOMBRE) LIKE '%A&' 
    GROUP BY NOTAS.NOTA, ASIGNATURAS.NOMBRE
        HAVING NOTAS.NOTA = (SELECT AVG(NOTA) FROM NOTAS
            WHERE NOTA >= 5
            GROUP BY NOTAS.COD_ASIG) 
    ORDER BY ASIGNATURAS.NOMBRE;

-- EJERCICIO 2
SELECT ALUMNOS.NOMBRE, TO_CHAR(SYSDATE, 'DD-MON-YYYY') AS FECHA, SUM(ASIGNATURAS.HORAS) AS HORAS_SEMANALES
FROM ALUMNOS JOIN NOTAS
ON ALUMNOS.COD_ALUMNO = NOTAS.COD_ALUMNO
JOIN ASIGNATURAS
ON NOTAS.COD_ASIG = ASIGNATURAS.COD_ASIG
GROUP BY ALUMNOS.NOMBRE;

-- EJERCICIO 3
SELECT (SELECT MAX(AVG(NOTA)) FROM NOTAS GROUP BY NOTA) - AVG(NOTAS.NOTA) AS
NOTA_DIFERENCIA, ALUMNOS.NOMBRE
FROM NOTAS JOIN ALUMNOS
ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO
WHERE UPPER(ALUMNOS.NOMBRE) LIKE 'ANA' 
GROUP BY ALUMNOS.NOMBRE;
 
 -- EJERCICIO 4
 SELECT PROFESORES.NOMBRE, ASIGNATURAS.NOMBRE, MAX(AVG(NOTAS.NOTA))
 FROM PROFESORES JOIN ASIGNATURAS
 ON PROFESORES.CODIGO = ASIGNATURAS.COD_PROFE 
 JOIN NOTAS
 ON ASIGNATURAS.COD_ASIG = NOTAS.COD_ASIG
 group by PROFESORES.NOMBRE, ASIGNATURAS.NOMBRE
    HAVING NOTAS.NOTA;
 
 -- EJERCICIO 5 
SELECT NOTAS.COD_ASIG, NOTAS.COD_ALUMNO, ALUMNOS.NOMBRE
FROM NOTAS JOIN ALUMNOS
ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO
WHERE NOTAS.COD_ASIG = (SELECT COD_ALUMNO FROM ALUMNOS
WHERE UPPER(NOMBRE) LIKE'ANA')
INTERSECT
SELECT NOTAS.COD_ASIG, NOTAS.COD_ALUMNO, ALUMNOS.NOMBRE
FROM NOTAS JOIN ALUMNOS
ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO;
 
 -- EJERCICIO 6
 SELECT PROFESORES.NOMBRE, ASIGNATURAS.NOMBRE
 FROM PROFESORES JOIN ASIGNATURAS
 ON PROFESORES.CODIGO = ASIGNATURAS.COD_PROFE 
 JOIN NOTAS
 ON ASIGNATURAS.COD_ASIG = NOTAS.COD_ASIG
    WHERE NOTAS.NOTA > 5;
 
 -- EJERCICIO 7
 SELECT ASIGNATURAS.NOMBRE
 FROM ASIGNATURAS JOIN
 
 -- EJERCICIO 8
 UPDATE NOTAS
 SET NOTA = (SELECT MAX(NOTA) FROM NOTAS);
 
 -- EJERCICIO 9
 DELETE * FROM ALUMNOS JOIN NOTAS
 ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO
 WHERE NOTAS.NOTA < 5;
 
 -- EJERCICIO 10
 SELECT ALUMNOS.NOMBRE, NOTAS.NOTA
 FROM ALUMNOS JOIN NOTAS
 ON NOTAS.COD_ALUMNO = ALUMNOS.COD_ALUMNO
 WHERE NOTAS.NOTA < 5 AND COD_ASIG IN (1,2,3,4);
